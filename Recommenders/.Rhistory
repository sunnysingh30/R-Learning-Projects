methods(class=class(MovieLense))
object.size(MovieLense)
object.size(as.matrix(MovieLense))
object.size(as(MovieLense, "matrix"))
object.size(as(MovieLense, "matrix"))/object.size(MovieLense)
?similarity
similarity <- similarity(MovieLense[1:4,], method = "cosine", which="users")
similarity_mat <- similarity(MovieLense[1:4,], method = "cosine", which="users")
rm(similarity)
similarity_mat
plot(similarity_mat)
plot(similarity_mat, type="l")
class(similarity_mat)
hclust(similarity_mat)
c  <- hclust(similarity_mat)
plot(c)
c
summary(c)
plot(c,)
plot(c)
source('~/.active-rstudio-document', echo=TRUE)
class(hclust(similarity_mat))
source('~/.active-rstudio-document', echo=TRUE)
class(hclust(similarity_mat))
rm(c)
plot(similarity_mat, type="l")
similarity_mat <- similarity(MovieLense[1:4,], method = "cosine", which="users")
similarity_usr <- similarity(MovieLense[1:4,], method = "cosine", which="users")
rm(similarity_mat)
similarity_mat
similarity_usr
class(similarity_usr)
as.matrix(similarity_usr)
image(as.matrix(similarity_usr), main="usr matrix")
recommenderRegistry$get_entries()
recommenderRegistry$get_entries(dataType="realRatingMatrix")
names(recommender_models)
recommender_models <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
names(recommender_models)
recommender_models$UBCF_realRatingMatrix
recommender_models$IBCF_realRatingMatrix
library(recommenderlab)
library(ggplot2)
data("MovieLense")
class(MovieLense)
dim(MovieLense)
as.vector(MovieLense)
as.vector(MovieLense@data)
dim(MovieLense)
unique(as.vector(MovieLense@data))
table(unique(as.vector(MovieLense@data)))
vec_rat <- as.vector(MovieLense@data)))
vec_rat <- as.vector(MovieLense@data)
vec_rat
table(vec_rat)
#Exploring the nature of data
dim(MovieLense)
vec_rat <- as.vector(MovieLense@data)
table(vec_rat)
dim(MovieLense)
MovieLense@data
as.vector(MovieLense@data)
vec_rat <- as.vector(MovieLense@data)
unique(vec_rat)
table(vec_rat)
table_rat <- table(vec_rat)
plot(vec_rat)
plot(vec_rat)
table_rat <- table(vec_rat)
dim(MovieLense)
vec_rat <- as.vector(MovieLense@data)
unique(vec_rat)
table_rat <- table(vec_rat)
table_rat
vec_rat <- vec_rat[vec_rat != 0]
vec_rat
vec_rat <- factor(vec_rat)
plot(vec_rat)
ggplot(vec_rat)
qplot(vec_rat)
qplot(vec_rat) + ggtitle("Distribution of the ratings")
#Explring which movies have been viewed
colCounts(MovieLense)
views_per_movie <- colCounts(MovieLense)
names(views_per_movie)
#Sort the movies by number of views
table_viewes <- data.frame(
movie = names(views_per_movie)
viewes = views_per_movie
)
#Sort the movies by number of views
table_viewes <- data.frame(
movie = names(views_per_movie),
viewes = views_per_movie
)
table_viewes
head(table_viewes)
#Sort the movies by number of views
table_views <- data.frame(
movie = names(views_per_movie),
viewes = views_per_movie
)
rm(table_viewes)
#Sort the movies by number of views
table_views <- data.frame(
movie = names(views_per_movie),
viewes = views_per_movie
)
names(table_views)
rm(viewes)
table_viewes <- table_views[order(table_views$views, decreasing = T), ]
table_views <- table_views[order(table_views$views, decreasing = T), ]
#Sort the movies by number of views
table_views <- data.frame(
movie = names(views_per_movie),
views = views_per_movie
)
table_views <- table_views[order(table_views$views, decreasing = T), ]
table_
table_vi
table_views
unique(table_views)
unique(table_views$movie)
ggplot(table_views[1:6,])
ggplot(table_views[1:6,]) + aes(x='movies', y= 'views')
ggplot(table_views[1:6,]) + aes(x='movies', y= 'views')
+ geom_bar(stat="identity")
ggplot(table_views[1:6,]) + aes(x='movies', y= 'views')
+ geom_bar(stat="identity")
ggplot(table_views[1:6,]) + aes(x='movies', y= 'views'))
+ geom_bar(stat="identity")
ggplot(table_views[1:6,]), aes(x='movies', y= 'views'))
+ geom_bar(stat="identity")
ggplot(table_views[1:6,]), aes(x=movies, y= views))
+ geom_bar(stat="identity")
ggplot(table_views[1:6,]), aes(x=movies, y= views)) + geom_bar(stat="identity")
ggplot(table_views[1:6,], aes(x=movie, y=views))
ggplot(table_views[1:6,], aes(x=movie, y=views)) + geom_bar(stat="identity")
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis_text.x=element(angle=45, hjust=1))
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis_text.x = element_text(angle=45, hjust=1))
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis_text.x = element_text(angle=45, hjust=1))
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=45, hjust=1))
#Visualize 1st 6 rows and build histogram
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=45, hjust=1))
#Visualize 1st 6 rows and build histogram
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
ggtitle("Number of views of top movies")
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
avg_ra
avg_rat
names(MovieLense)
head(MovieLense)
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
ggplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
qplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
rm(list=ls())
library(recommenderlab)
help(package="recommenderlab")
set.seed(1)
data_pkg <- data(package = "recommenderlab")
names(data_pkg)
data_pkg$results[, "Item"]
data("MovieLense")
MovieLense
#Class for rating matrix
class(MovieLense)
#Method we can apply on this class -- realRatingMatrix
methods(class=class(MovieLense))
#Compare the size of MovieLense with the corresponding R matrix:
object.size(MovieLense)
object.size(as(MovieLense, "matrix"))
#Compute how many time recommenderlab is compact
object.size(as(MovieLense, "matrix"))/object.size(MovieLense)
## Computing similarity matrix
similarity_usr <- similarity(MovieLense[1:4,], method = "cosine", which="users")
similarity_usr
class(similarity_usr)
as.matrix(similarity_usr)
image(as.matrix(similarity_usr), main="usr matrix")
## Recommendation models
recommender_models <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
names(recommender_models)
recommender_models$UBCF_realRatingMatrix
recommender_models$IBCF_realRatingMatrix
##############################################################################
#DATA EXPLORATION
#In this section we will use recommender to build recommender sys and ggplot2
#Load packages
library(recommenderlab)
library(ggplot2)
data("MovieLense")
class(MovieLense)
#Exploring the nature of data
dim(MovieLense)
vec_rat <- as.vector(MovieLense@data)
unique(vec_rat)
table_rat <- table(vec_rat)
vec_rat <- vec_rat[vec_rat != 0]
plot(vec_rat)
vec_rat <- factor(vec_rat)
qplot(vec_rat) + ggtitle("Distribution of the ratings")
#Exploring which movies have been viewed
views_per_movie <- colCounts(MovieLense)
#Sort the movies by number of views
names(views_per_movie)
table_views <- data.frame(
views = views_per_movie
table_views <- table_views[order(table_views$views, decreasing = T), ]
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
## Exploring average ratings
qplot(avg_rat) +
movie = names(views_per_movie),
ggtitle("Distribution of avg movie rating")
ggtitle("Number of views of top movies")
stat_bin(binwidth = 0.1) +
#Visualize 1st 6 rows and build histogram
avg_rat <- colMeans(MovieLense)
)
geom_bar(stat="identity") +
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
qplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
avg_rat <- colMeans(MovieLense)
qplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
MovieLense
class(MovieLense)
MovieLense@data
MovieLense@data
MovieLense@data
MovieLense@data
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
qplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
colCounts(MovieLense)
avg_rat
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
qplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
#Visualize 1st 6 rows and build histogram
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
ggtitle("Number of views of top movies")
table_views <- table_views[order(table_views$views, decreasing = T), ]
#Visualize 1st 6 rows and build histogram
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
ggtitle("Number of views of top movies")
rm(list=ls())
library(recommenderlab)
help(package="recommenderlab")
set.seed(1)
data_pkg <- data(package = "recommenderlab")
names(data_pkg)
data_pkg$results[, "Item"]
data("MovieLense")
MovieLense
#Class for rating matrix
class(MovieLense)
#Method we can apply on this class -- realRatingMatrix
methods(class=class(MovieLense))
#Compare the size of MovieLense with the corresponding R matrix:
object.size(MovieLense)
object.size(as(MovieLense, "matrix"))
#Compute how many time recommenderlab is compact
object.size(as(MovieLense, "matrix"))/object.size(MovieLense)
## Computing similarity matrix
similarity_usr <- similarity(MovieLense[1:4,], method = "cosine", which="users")
similarity_usr
class(similarity_usr)
as.matrix(similarity_usr)
image(as.matrix(similarity_usr), main="usr matrix")
## Recommendation models
recommender_models <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
names(recommender_models)
recommender_models$UBCF_realRatingMatrix
recommender_models$IBCF_realRatingMatrix
##############################################################################
#DATA EXPLORATION
#In this section we will use recommender to build recommender sys and ggplot2
#Load packages
library(recommenderlab)
library(ggplot2)
data("MovieLense")
class(MovieLense)
#Exploring the nature of data
dim(MovieLense)
vec_rat <- as.vector(MovieLense@data)
unique(vec_rat)
table_rat <- table(vec_rat)
vec_rat <- vec_rat[vec_rat != 0]
vec_rat <- factor(vec_rat)
plot(vec_rat)
qplot(vec_rat) + ggtitle("Distribution of the ratings")
#Exploring which movies have been viewed
views_per_movie <- colCounts(MovieLense)
names(views_per_movie)
#Sort the movies by number of views
table_views <- data.frame(
movie = names(views_per_movie),
views = views_per_movie
)
table_views <- table_views[order(table_views$views, decreasing = T), ]
#Visualize 1st 6 rows and build histogram
ggplot(table_views[1:6,], aes(x=movie, y=views)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
ggtitle("Number of views of top movies")
## Exploring average ratings
avg_rat <- colMeans(MovieLense)
qplot(avg_rat) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg movie rating")
avg_rat[views_per_movie >100]
avg_rat_rel <- avg_rat[views_per_movie >100]
qplot(avg_rat_rel)
qplot(avg_rat_rel) + stat_bin(binwidth=0.1)
qplot(avg_rat_rel) +
stat_bin(binwidth=0.1) +
ggtitle("Distribution of relevant avg ratings")
qplot(avg_rat_rel) +
stat_bin(binwidth=0.1) +
ggtitle(paste("Distribution of relevant avg ratings"))
image(MovieLense, main="Heatmap of ratings matrix")
image(MovieLense[1:10, 1:!5], main="Heatmap of ratings matrix")
image(MovieLense[1:10, 1:15], main="Heatmap of ratings matrix")
?quantile
min_n_movies <- quantile(rowCounts(MovieLense), 0.99)
min_n_usr <- quantile(colCounts(MovieLense), 0.99)
min_n_movies
min_n_usr
image(MovieLense[rowCounts(MovieLense) > min_n_movies, colCounts(MovieLense) > min_n_usr ])
image(MovieLense[rowCounts(MovieLense) > min_n_movies,
colCounts(MovieLense) > min_n_usr ],
main= "Heatmap of the top users")
image(MovieLense[rowCounts(MovieLense) > min_n_movies,
colCounts(MovieLense) > min_n_usr ],
main= "Heatmap of the top users and movies")
rating_movies <- MovieLense[rowCounts(MovieLense) > 50, colCounts(MovieLense)>100]
rating_movies
class(rating_movies)
# Visualize top matrix
min_movies <- quantile(rowCounts(rating_movies), 0.98)
min_usrs <- quantile(colCounts(rating_movies), 0.98)
image(rating_movies[rowCounts(rating_movies)>min_movies,
colCounts(rating_movies)>min_usrs])
avg_rat_per_usr <- rowMeans(rating_movies)
avg_rat_per_usr
class(avg_rat_per_usr)
plot(avg_rat_per_usr)
qplot(avg_rat_per_usr) +
stat_bin(binwidth = 0.1)
qplot(avg_rat_per_usr) +
stat_bin(binwidth = 0.1) +
ggtitle("Distribution of avg rating per user")
rating_movies_norm <- normalize(rating_movies)
rating_movies_norm
rowMeans(rating_movies_norm)
sum(rowMeans(rating_movies_norm))
sum(rowMeans(rating_movies_norm) > 0.00001)
sum(rowMeans(rating_movies_norm) > 0)
sum(rowMeans(rating_movies_norm) > 0.00001)
image(rating_movies_norm[rowCounts(rating_movies_norm) > min_movies,
colCounts(rating_movies_norm)> min_usrs])
image(rating_movies_norm[rowCounts(rating_movies_norm) > min_movies,
colCounts(rating_movies_norm)> min_usrs],
main = "Heatmap of top users and movies")
matrix(1:10, nrow=2, ncol=5)
x <-   matrix(1:10, nrow=2, ncol=5)
rowCounts(x)
rowCounts(as.data.frame(x))
rowCounts(as.data.frame(x))
x <-   as.data.frame(matrix(1:10, nrow=2, ncol=5))
rowCounts(x)
x
rm(x)
rating_movies_watched <- binarize(rating_movies, minRating=1)
rowCounts(rating_movies)
min_usrs_binary <- quantile(rowCounts(rating_movies), 0.95)
rating_movies_watched <- binarize(rating_movies, minRating=1)
min_movies_binary <- quantile(rowCounts(rating_movies), 0.95)
min_usrs_binary <- quantile(rowCounts(rating_movies), 0.95)
image(rating_movies_watched[rowCounts(rating_movies) > min_movies_binary,
colCounts(rating_movies) > min_usrs_binary])
rating_movies_watched <- binarize(rating_movies, minRating=1)
min_movies_binary <- quantile(rowCounts(rating_movies), 0.95)
min_usrs_binary <- quantile(rowCounts(rating_movies), 0.95)
image(rating_movies_watched[rowCounts(rating_movies) > min_movies_binary,
colCounts(rating_movies) > min_usrs_binary])
image(rating_movies_norm[rowCounts(rating_movies_norm) > min_movies,
colCounts(rating_movies_norm)> min_usrs],
main = "Heatmap of top users and movies")
rating_movies_watched <- binarize(rating_movies, minRating=1)
min_movies_binary <- quantile(rowCounts(rating_movies), 0.95)
min_usrs_binary <- quantile(rowCounts(rating_movies), 0.95)
image(rating_movies_watched[rowCounts(rating_movies) > min_movies_binary,
colCounts(rating_movies) > min_usrs_binary])
rating_movies_good <- binarize(rating_movies, minrating=3)
rating_movies_good <- binarize(rating_movies, minRating=3)
rating_movies_good <- binarize(rating_movies, minRating=3)
image(rating_movies_good[rowCounts(rating_movies) > min_movies_binary,
colCounts(rating_movies)> min_usrs_binary])
colCounts(MovieLense)
head(colCounts(MovieLense))
head(names(MovieLense))
head(rowCounts(MovieLense))
which_train <-
sample(x=c(T,F), size=nrow(ratings_movie), replace=T, prob=c(0.8, 0.2))
which_train <-
sample(x=c(T,F), size=nrow(rating_movies), replace=T, prob=c(0.8, 0.2))
head(which_train)
recc_da_train <- ratings_movies(which_train)
head(!which_train)
head(which_train)
recc_data_train <- rating_movies[which_train, ]
recc_data_test <- rating_movies[!which_train,]
which_set <- sample(x=1:5, size=nrow(rating_movies), replace=T)
which_set
recommender_models <- recommenderRegistry$get_entries(dataType="realRatingMatrix")
recommender_models
recommender_models$IBCF_realRatingMatrix
recommender_models$IBCF_realRatingMatrix$parameters
recc_model <- Recommender(data=recc_data_train, method="IBCF",
parameter=list(k=30))
class(recc_model)
getModel(recc_model)
model_details <- getModel(recc_model)
names(model_details)
model_details$description
model_details$k
model_details$sim
class(model_details$sim)
n_top_items <- 20
# Lets build heat map
n_top_items <- 20
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
model_details$k
rowSums(model_details$sim >0)
row_sums <- rowSums(model_details$sim >0)
tale(row_sums)
table(row_sums)
?rowSums
row_sums <- rowSums(model_details$sim)
table(row_sums)
row_sums <- rowSums(model_details$sim >0)
table(row_sums)
n_top_items <- 30
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 40
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 1000
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 1000
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 100
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 10
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 30
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 20
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
n_top_items <- 20
image(model_details$sim[1:n_top_items, 1:n_top_items],
main="Heat map of the first rows and columns")
# Most of the values are equal to 0. The reason is that each row
#contains only k elements. Let's check it:
model_details$k
row_sums <- rowSums(model_details$sim >0)
table(row_sums)
model_details$sim
head(model_details$sim)
head(model_details$sim, 2)
